{
	"version": "2.0.0",
	"tasks": [
		{
			"label": "Create Story 4.1: Application Submission",
			"type": "shell",
			"command": "echo \"# Story 4.1: Application Submission\n\n## Story Overview\n**As a Job Seeker (Pat/Riley/Finn), I want to submit my application and upload my resume easily, so that the process is not a barrier to applying.**\n\n## Story Details\n**Story Points:** 8\n**Priority:** High\n**Epic:** Application Management\n**Depends On:** Stories 1.1 (Authentication), 1.2 (Profile), 3.1 (Job Search)\n\n## Acceptance Criteria\n- [ ] Job seekers can apply for jobs from the job detail page\n- [ ] Application form includes resume upload (PDF, DOCX, max 5MB)\n- [ ] Optional cover letter text field is available\n- [ ] Form validation ensures required fields are completed\n- [ ] Application data is securely stored in PayloadCMS\n- [ ] Success confirmation shows after submission\n- [ ] Duplicate applications for same job are prevented\n- [ ] Mobile-responsive application form\n- [ ] Internationalized form labels and validation messages\n\n## Technical Requirements\n\n### API Integration\n- **Endpoint:** POST /api/applications (PayloadCMS endpoint)\n- **Request Body:** \n  - jobId: string\n  - userId: string  \n  - resume: File (PDF/DOCX)\n  - coverLetter?: string\n  - status: 'APPLIED'\n- **Response:** Application object with ID and confirmation\n\n### Frontend Components\n\n#### 1. Application Form Page\n**File:** `src/app/[locale]/careers/apply/[jobId]/page.tsx`\n```typescript\n// Application submission page with form\n// File upload handling with validation\n// Internationalized routing and content\n```\n\n#### 2. Application Form Component\n**File:** `src/components/careers/ApplicationForm.tsx`\n```typescript\ninterface ApplicationFormProps {\n  jobId: string;\n  jobTitle: string;\n  locale: string;\n}\n\nexport function ApplicationForm({ jobId, jobTitle, locale }: ApplicationFormProps) {\n  // React Hook Form with Zod validation\n  // File upload with size/type validation\n  // PayloadCMS API integration\n  // Error handling and success states\n}\n```\n\n#### 3. File Upload Component\n**File:** `src/components/forms/FileUpload.tsx`\n```typescript\ninterface FileUploadProps {\n  onFileSelect: (file: File) => void;\n  acceptedTypes: string[];\n  maxSize: number;\n}\n\nexport function FileUpload({ onFileSelect, acceptedTypes, maxSize }: FileUploadProps) {\n  // Drag & drop file upload\n  // File type and size validation\n  // Preview and remove functionality\n}\n```\n\n### Data Models\n\n#### Application Interface\n```typescript\ninterface Application {\n  id: string;\n  jobId: string;\n  userId: string;\n  resume: Media; // PayloadCMS media object\n  coverLetter?: string;\n  status: 'APPLIED' | 'UNDER_REVIEW' | 'SHORTLISTED' | 'INTERVIEW' | 'REJECTED' | 'HIRED';\n  submittedAt: Date;\n  updatedAt: Date;\n}\n```\n\n#### Form Validation Schema\n```typescript\nimport { z } from 'zod';\n\nexport const applicationSchema = z.object({\n  jobId: z.string().min(1, 'Job ID is required'),\n  resume: z.instanceof(File)\n    .refine(file => file.size <= 5 * 1024 * 1024, 'File size must be less than 5MB')\n    .refine(file => ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'].includes(file.type), 'Only PDF and DOCX files are allowed'),\n  coverLetter: z.string().optional(),\n});\n```\n\n### Internationalization\n- **English URLs:** `/careers/apply/[jobId]`\n- **Spanish URLs:** `/carreras/solicitar/[jobId]`\n- **French URLs:** `/carrières/postuler/[jobId]`\n- **Translation Keys:**\n  - `careers.apply.title`\n  - `careers.apply.resume.label`\n  - `careers.apply.coverLetter.label`\n  - `careers.apply.submit.button`\n  - `careers.apply.success.message`\n\n### File Structure\n```\nsrc/\n├── app/[locale]/\n│   ├── careers/\n│   │   ├── apply/\n│   │   │   └── [jobId]/\n│   │   │       └── page.tsx          # Application page\n│   │   └── [jobId]/\n│   │       └── page.tsx               # Job detail with apply button\n│   └── layout.tsx                     # Locale-aware layout\n├── components/\n│   ├── careers/\n│   │   ├── ApplicationForm.tsx        # Main application form\n│   │   └── ApplyButton.tsx           # Apply button component\n│   └── forms/\n│       └── FileUpload.tsx             # Reusable file upload\n└── lib/\n    ├── api/\n    │   └── applications.ts            # Application API functions\n    └── validations/\n        └── application.ts              # Form validation schemas\n```\n\n## Testing Requirements\n\n### Unit Tests\n- ApplicationForm renders correctly with job details\n- File upload validates file types and sizes\n- Form submission handles success and error states\n- Validation schema catches invalid inputs\n\n### Integration Tests\n- Application submission works with PayloadCMS API\n- File upload integrates with PayloadCMS media handling\n- Form data is correctly mapped to API request\n- Internationalization switches work properly\n\n### E2E Tests\n- User can navigate from job detail to application form\n- Complete application submission flow works\n- File upload and validation work correctly\n- Success confirmation displays after submission\n- Duplicate application prevention works\n\n## Dependencies\n- Stories 1.1, 1.2, 3.1: Authentication, profile, and job search functionality\n- PayloadCMS Applications collection and API endpoints\n- File upload handling (PayloadCMS media or external service)\n- React Hook Form + Zod for form validation\n- Internationalization setup for application URLs\n\n## Definition of Done\n- [ ] All acceptance criteria met\n- [ ] Unit tests passing (80%+ coverage)\n- [ ] Integration tests passing\n- [ ] E2E tests passing\n- [ ] Code reviewed and approved\n- [ ] File upload security validated\n- [ ] Internationalization working for all supported locales\n- [ ] Mobile responsiveness verified\n- [ ] Accessibility (WCAG 2.1 AA) compliance checked\n- [ ] PayloadCMS application data structure confirmed\" > docs/stories/JobPortal/4.1.story.md"
		}
	]
}