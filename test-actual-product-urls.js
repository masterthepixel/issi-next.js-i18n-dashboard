// Test script to verify actual product URLs generated by the BentoGrid cards
// This tests the URLs that users actually click, not what we think they should be
// Run this with: node test-actual-product-urls.js

const https = require('https');
const http = require('http');

// Function to test a URL
function testUrl(url) {
  return new Promise((resolve) => {
    const protocol = url.startsWith('https') ? https : http;

    const req = protocol.get(url, (res) => {
      const status = res.statusCode;
      const success = status === 200;
      resolve({
        url,
        status,
        success,
        message: success ? 'SUCCESS' : `FAILED (${status})`
      });
    });

    req.on('error', (err) => {
      resolve({
        url,
        status: 'ERROR',
        success: false,
        message: `ERROR: ${err.message}`
      });
    });

    req.setTimeout(5000, () => {
      req.destroy();
      resolve({
        url,
        status: 'TIMEOUT',
        success: false,
        message: 'TIMEOUT'
      });
    });
  });
}

// Extract the actual URLs that the BentoGrid cards generate
// Based on the getProductSlug function: productSlugMap[productId] || productId
const productSlugMap = {
  "gms": "grant-management-system",
  "ects": "electronic-correspondence-tracking-system",
  "ets": "environmental-tracking-system",
  "mdsps": "membership-database-subsidy-payment-system",
  "project-management": "project-management-suite",
  "bug-tracking": "bug-tracking-system",
  "capture-manager": "capture-manager",
  "prudent-agile": "prudent-agile-methodology",
  "task-management": "task-management-system",
  "requirements-management": "requirements-management-system",
  "hr-manager": "hr-management-system",
  "employee-performance": "employee-performance-system",
  "timesheet-management": "timesheet-management-system",
  "employee-talent-repository": "employee-talent-repository",
  "competency-skills-matrix": "competency-skills-matrix",
  "training-dashboard": "training-dashboard",
  "i-learn": "i-learn-system",
  "rsvp": "rsvp-event-management",
  "audit-reporting": "audit-reporting-system",
  "expense-tracking": "expense-tracking-system",
  "meeting-minutes-manager": "meeting-minutes-manager",
  "training-records": "training-records-system",
  "central-data": "central-data-platform",
  "e-survey": "e-survey-platform",
  "form-management": "form-management-system",
  "i-code": "i-code-testing-platform",
  "professional-management": "professional-management-system",
  "complaint-tracking": "complaint-tracking-system",
  "inventory-asset-tracking": "inventory-asset-tracking-system",
  "visitor-log": "visitor-log-system"
};

// All product IDs from the actual BentoGrid allProducts array
const actualProductIds = [
  "gms",
  "ects",
  "ets",
  "mdsps",
  "project-management",
  "bug-tracking",
  "capture-manager",
  "prudent-agile",
  "task-management",
  "requirements-management",
  "hr-manager",
  "employee-performance",
  "timesheet-management",
  "employee-talent-repository",
  "competency-skills-matrix",
  "training-dashboard",
  "i-learn",
  "rsvp",
  "audit-reporting",
  "expense-tracking",
  "meeting-minutes-manager",
  "training-records",
  "central-data",
  "e-survey",
  "form-management",
  "i-code",
  "professional-management",
  "complaint-tracking",
  "inventory-asset-tracking",
  "visitor-log"
];

// Generate actual URLs that the cards will create
function getActualCardUrl(productId) {
  // This mimics the getProductSlug function: productSlugMap[productId] || productId
  const slug = productSlugMap[productId] || productId;
  return `/en/products/${slug}`;
}

async function testActualProductUrls() {
  console.log('üéØ Testing ACTUAL product URLs generated by BentoGrid cards...\n');

  const baseUrl = 'http://localhost:3001';
  const results = [];

  for (let i = 0; i < actualProductIds.length; i++) {
    const productId = actualProductIds[i];
    const actualPath = getActualCardUrl(productId);
    const fullUrl = `${baseUrl}${actualPath}`;
    const expectedSlug = productSlugMap[productId];

    console.log(`[${i + 1}/${actualProductIds.length}] Testing: ${productId}`);
    console.log(`   Card generates: ${actualPath}`);
    if (expectedSlug && expectedSlug !== productId) {
      console.log(`   Expected slug: ${expectedSlug}`);
    }

    const result = await testUrl(fullUrl);
    results.push({
      productId,
      actualPath,
      expectedSlug,
      fullUrl,
      mismatch: expectedSlug && actualPath !== `/en/products/${expectedSlug}`,
      ...result
    });

    console.log(`   ${result.success ? '‚úÖ' : '‚ùå'} ${result.message}`);

    if (result.success && expectedSlug && actualPath !== `/en/products/${expectedSlug}`) {
      console.log(`   ‚ö†Ô∏è  MISMATCH: Card URL works but doesn't match expected slug!`);
    }
    console.log('');
  }

  console.log('\nüìä SUMMARY:');
  console.log('='.repeat(80));

  const successful = results.filter(r => r.success);
  const failed = results.filter(r => !r.success);
  const mismatched = results.filter(r => r.mismatch);

  console.log(`‚úÖ Successful: ${successful.length}/${results.length}`);
  console.log(`‚ùå Failed: ${failed.length}/${results.length}`);
  console.log(`‚ö†Ô∏è  Mismatched (working but unexpected URL): ${mismatched.length}/${results.length}`);

  if (failed.length > 0) {
    console.log('\n‚ùå FAILED URLs (these cards lead to 404 pages):');
    failed.forEach(result => {
      console.log(`   ${result.productId} -> ${result.actualPath} (${result.message})`);
    });
  }

  if (mismatched.length > 0) {
    console.log('\n‚ö†Ô∏è  WORKING BUT MISMATCHED URLs:');
    mismatched.forEach(result => {
      console.log(`   ${result.productId}:`);
      console.log(`      Card URL: ${result.actualPath}`);
      console.log(`      Expected: /en/products/${result.expectedSlug}`);
    });
  }

  console.log('\n‚úÖ SUCCESSFUL URLs:');
  successful.forEach(result => {
    console.log(`   ${result.productId} -> ${result.actualPath}`);
  });

  const overallSuccess = failed.length === 0;
  console.log(`\nüéØ Overall Success: ${overallSuccess ? 'PASS' : 'FAIL'} (${Math.round((successful.length / results.length) * 100)}% working)`);

  if (!overallSuccess) {
    console.log(`\nüí° NEXT STEPS:`);
    console.log(`   1. Fix the URLs that return 404 (failed cards)`);
    console.log(`   2. Verify that all cards link to the correct pages`);
    console.log(`   3. Update product data to match expected slugs`);
  }

  return {
    total: results.length,
    successful: successful.length,
    failed: failed.length,
    mismatched: mismatched.length,
    overallSuccess,
    failedUrls: failed.map(r => ({ id: r.productId, url: r.actualPath, message: r.message }))
  };
}

// Run the test
if (require.main === module) {
  testActualProductUrls()
    .then(summary => {
      if (summary.overallSuccess) {
        console.log('\nüéâ All BentoGrid cards link to working product pages!');
      } else {
        console.log(`\n‚ö†Ô∏è  ${summary.failed} cards are broken and lead to 404 pages.`);
        process.exit(1);
      }
    })
    .catch(err => {
      console.error('‚ùå Test failed:', err);
      process.exit(1);
    });
}

module.exports = { testActualProductUrls, actualProductIds, getActualCardUrl };
