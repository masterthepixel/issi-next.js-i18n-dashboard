'use client';

import { useEffect, useState } from 'react';

interface BundleInfo {
    name: string;
    size: number;
    gzipSize?: number;
    parsedSize?: number;
}

interface BundleAnalyzerProps {
    showInProduction?: boolean;
}

export function BundleAnalyzer({ showInProduction = false }: BundleAnalyzerProps) {
    const [bundleData, setBundleData] = useState<BundleInfo[]>([]);
    const [isVisible, setIsVisible] = useState(false);

    useEffect(() => {
        // Only show in development or if explicitly enabled
        if (process.env.NODE_ENV === 'production' && !showInProduction) return;

        // Fetch bundle analysis data (would be generated by webpack-bundle-analyzer)
        // For now, we'll show a placeholder that can be populated with real data
        const mockBundleData: BundleInfo[] = [
            { name: 'vendor', size: 2500000, gzipSize: 800000 },
            { name: 'main', size: 1200000, gzipSize: 350000 },
            { name: 'three.js', size: 800000, gzipSize: 250000 },
            { name: 'ui-components', size: 600000, gzipSize: 180000 },
        ];

        setBundleData(mockBundleData);
    }, [showInProduction]);

    const formatBytes = (bytes: number) => {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    };

    const totalSize = bundleData.reduce((sum, item) => sum + item.size, 0);
    const totalGzipSize = bundleData.reduce((sum, item) => sum + (item.gzipSize || 0), 0);

    if (process.env.NODE_ENV === 'production' && !showInProduction) return null;

    return (
        <>
            {/* Toggle Button */}
            <button
                onClick={() => setIsVisible(!isVisible)}
                className="fixed bottom-20 right-4 bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded-lg text-sm font-medium z-50 shadow-lg"
                title="Toggle Bundle Analyzer"
            >
                ðŸ“Š
            </button>

            {/* Bundle Analyzer Panel */}
            {isVisible && (
                <div className="fixed bottom-20 right-20 bg-black/90 text-white p-4 rounded-lg text-sm font-mono z-40 max-w-md max-h-96 overflow-auto shadow-2xl">
                    <div className="flex justify-between items-center mb-3">
                        <h3 className="font-semibold text-green-400">Bundle Analyzer</h3>
                        <button
                            onClick={() => setIsVisible(false)}
                            className="text-gray-400 hover:text-white"
                        >
                            âœ•
                        </button>
                    </div>

                    <div className="space-y-2">
                        {bundleData.map((item, index) => (
                            <div key={index} className="flex justify-between items-center">
                                <span className="text-gray-300">{item.name}:</span>
                                <div className="text-right">
                                    <div className="text-white">{formatBytes(item.size)}</div>
                                    {item.gzipSize && (
                                        <div className="text-gray-400 text-xs">
                                            gz: {formatBytes(item.gzipSize)}
                                        </div>
                                    )}
                                </div>
                            </div>
                        ))}
                    </div>

                    <div className="border-t border-gray-600 mt-3 pt-3">
                        <div className="flex justify-between items-center font-semibold">
                            <span className="text-yellow-400">Total:</span>
                            <div className="text-right">
                                <div className="text-yellow-400">{formatBytes(totalSize)}</div>
                                {totalGzipSize > 0 && (
                                    <div className="text-gray-400 text-xs">
                                        gz: {formatBytes(totalGzipSize)}
                                    </div>
                                )}
                            </div>
                        </div>
                    </div>

                    <div className="mt-3 text-xs text-gray-400">
                        ðŸ’¡ Run `pnpm build --analyze` for detailed analysis
                    </div>
                </div>
            )}
        </>
    );
}
