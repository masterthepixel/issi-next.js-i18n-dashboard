'use client'

import { useTheme } from "@/contexts/ThemeContext"
import { AutoTranslationSystem } from '@/utils/autoTranslation'
import { generateNetworkArcs } from "@/utils/networkTopology"
import { 
    ChevronRightIcon, 
    HomeIcon, 
    DocumentIcon,
    FolderOpenIcon,
    CodeBracketIcon,
    BeakerIcon,
    FolderIcon,
    CogIcon
} from '@heroicons/react/20/solid'
import dynamic from 'next/dynamic'
import Link from 'next/link'
import { usePathname } from 'next/navigation'
import { useEffect, useMemo, useState } from 'react'
import { useIntl } from 'react-intl'

const World = dynamic(() => import("@/components/ui/globe").then((m) => m.World), {
    ssr: false,
})

interface BreadcrumbItem {
    name: string
    href: string
    current: boolean
    icon?: React.ComponentType<{ className?: string }>
}

interface UniversalIntelligentBreadcrumbProps {
    customItems?: BreadcrumbItem[]
    showHome?: boolean
    className?: string
    lang?: string
    hideOnHomepage?: boolean
    messages?: Record<string, string> | Record<string, any>
}

// Icon mapping for different page types - Enhanced version
const getIconForSegment = (segment: string, isHome: boolean = false): React.ComponentType<{ className?: string }> => {
    if (isHome) return HomeIcon
    
    const iconMap: Record<string, React.ComponentType<{ className?: string }>> = {
        'home': HomeIcon,
        'docs': DocumentIcon,
        'documentation': DocumentIcon,
        'files': FolderOpenIcon,
        'folder': FolderOpenIcon,
        'products': FolderIcon,
        'services': CogIcon,
        'government': DocumentIcon,
        'compliance': DocumentIcon,
        'elearning': DocumentIcon,
        'about': DocumentIcon,
        'code': CodeBracketIcon,
        'css': CodeBracketIcon,
        'js': CodeBracketIcon,
        'javascript': CodeBracketIcon,
        'lab': BeakerIcon,
        'test': BeakerIcon,
        'experiments': BeakerIcon,
    }
    
    return iconMap[segment.toLowerCase()] || DocumentIcon
}

export default function UniversalIntelligentBreadcrumb({
    customItems,
    showHome = true,
    className = '',
    lang,
    hideOnHomepage = true,
    messages
}: UniversalIntelligentBreadcrumbProps) {
    const pathname = usePathname()
    const intl = useIntl()
    const { theme } = useTheme()
    const [mounted, setMounted] = useState(false)

    // Ensure component is mounted to avoid hydration mismatch
    useEffect(() => {
        setMounted(true)
    }, [])

    // Determine if dark mode
    const isDark = theme === 'dark'

    // Theme-aware globe configuration - exact copy from GlobeDemo
    const globeConfig = {
        pointSize: 0.8,  // Much smaller points (reduced from 1.6 to 0.8)

        // Dark mode configuration
        ...(isDark ? {
            globeColor: "#062056",                    // Deep blue globe
            polygonColor: "rgba(255,255,255,0.7)",   // White country borders
            ambientLight: "#38bdf8",                  // Blue ambient lighting
            emissive: "#062056",                      // Dark blue emissive
            emissiveIntensity: 0.1,
            atmosphereColor: "#FFFFFF",               // White atmosphere
        } : {
            // Light mode configuration
            globeColor: "#1e40af",                    // Realistic ocean blue like satellite photos
            polygonColor: "rgba(255,255,255,0.8)",   // Bright white country borders for contrast
            ambientLight: "#FFFFFF",                  // Bright white lighting
            emissive: "#1e40af",                      // Ocean blue emissive
            emissiveIntensity: 0.05,                  // Reduced intensity for light mode
            atmosphereColor: "#87CEEB",               // Sky blue atmosphere
        }),

        showAtmosphere: true,
        atmosphereAltitude: 0.1,
        shininess: 0.9,
        directionalLeftLight: "#ffffff",
        directionalTopLight: "#ffffff",
        pointLight: "#ffffff",
        arcTime: 600,    // Faster arc animation (reduced from 1000)
        arcLength: 0.7,  // Slightly shorter arcs for more frequent traffic
        initialPosition: { lat: 39.0042, lng: -76.8755 }, // Center on Greenbelt, MD
        autoRotate: true,
        autoRotateSpeed: 0.3, // Slower rotation to better see traffic

        // Point transparency and ring settings (much more subtle)
        pointOpacity: 0.6,      // More transparent points
        ringOpacity: 0.2,       // Very subtle ring animations
        ringIntensity: 0.3,     // Much reduced ring animation intensity
        rings: 1,               // Only 1 ring to reduce visual clutter
        maxRings: 2,            // Maximum 2 rings instead of 4
    }

    // Generate network arcs from ISSI datacenter topology
    const networkArcs = generateNetworkArcs()

    // Get appropriate icon for breadcrumb segment
    const getSegmentIcon = (segment: string, isHome: boolean = false) => {
        if (isHome) return HomeIcon
        
        // Map common segments to appropriate icons
        const iconMap: Record<string, any> = {
            'products': FolderIcon,
            'services': CogIcon,
            'government': DocumentIcon,
            'compliance': DocumentIcon,
            'elearning': DocumentIcon,
            'about': DocumentIcon,
        }
        
        return iconMap[segment.toLowerCase()] || DocumentIcon
    }

    const breadcrumbs = useMemo(() => {
        if (customItems) {
            return customItems
        }

        if (!pathname) {
            return []
        }

        // Generate breadcrumbs from pathname
        let processedPath = pathname

        // Remove language prefix if present
        if (lang && pathname.startsWith(`/${lang}`)) {
            processedPath = pathname.slice(`/${lang}`.length) || '/'
        }

        const pathSegments = processedPath.split('/').filter(Boolean)
        const items: BreadcrumbItem[] = []

        if (showHome) {
            const homeHref = lang ? `/${lang}/home` : '/home'
            // Use translated "Home" text
            const homeName = intl.formatMessage({
                id: 'breadcrumb.home',
                defaultMessage: 'Home'
            })
            items.push({
                name: homeName,
                href: homeHref,
                current: processedPath === '/' || pathname === homeHref,
                icon: HomeIcon
            })
        }

        let currentPath = lang ? `/${lang}` : ''

        pathSegments.forEach((segment, index) => {
            currentPath += `/${segment}`
            const isLast = index === pathSegments.length - 1

            // Intelligent naming: use translation system first, then fallback to capitalization
            let name: string

            // Try to get translation from breadcrumb-specific keys first
            const breadcrumbKey = `breadcrumb.${segment}`
            if (messages && messages[breadcrumbKey]) {
                name = messages[breadcrumbKey]
            } else {
                // Try AutoTranslation system for intelligent fallbacks
                try {
                    name = AutoTranslationSystem.getAutoTranslation(segment, lang || 'en')
                } catch {
                    // Fallback to simple capitalization
                    name = segment
                        .split(/[-_]/)
                        .map((word: string) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
                        .join(' ')
                }
            }

            items.push({
                name,
                href: currentPath,
                current: isLast,
                icon: getIconForSegment(segment)
            })
        })

        return items
    }, [pathname, customItems, showHome, lang, intl, messages])

    // Check if we're on homepage - including /en/home pattern
    const isHomepage = pathname === '/' ||
        (lang && pathname === `/${lang}`) ||
        (lang && pathname === `/${lang}/home`) ||
        pathname === '/home'

    // Don't render if on homepage and hideOnHomepage is true
    if (hideOnHomepage && isHomepage) {
        return null
    }

    // Don't render if only home item and we're on home page
    if (breadcrumbs.length <= 1 && isHomepage) {
        return null
    }

    return (
        <div className="relative overflow-visible">
            {/* Globe positioned in top right corner - escape container bounds and higher z-index for mobile */}
            <div className="absolute -top-[200px] -right-8 md:-top-[160px] md:-right-16 overflow-visible z-50">
                <div className="w-[35vw] h-[40vh] max-w-none overflow-visible">
                    {mounted && (
                        <World
                            data={networkArcs}
                            globeConfig={globeConfig}
                        />
                    )}
                </div>
            </div>

            {/* Circular Breadcrumb Navigation - Enhanced CodePen Pattern */}
            <nav 
                aria-label={intl.formatMessage({
                    id: 'breadcrumb.seo.description',
                    defaultMessage: 'Breadcrumb'
                })} 
                className={`flex ${className}`}
            >
                {/* Container with left margin to account for overlapping circles */}
                <div className="ml-12">
                    <ul className="inline-flex list-none">
                        {breadcrumbs.map((item, index) => {
                            const IconComponent = item.icon || getIconForSegment(
                                item.href.split('/').pop() || '', 
                                index === 0
                            )
                            const isLast = index === breadcrumbs.length - 1
                            
                            return (
                                <li
                                    key={item.href}
                                    className={`
                                        relative float-right
                                        ${isDark ? 'bg-slate-700' : 'bg-slate-600'}
                                        rounded-full
                                        p-1.5
                                        transition-all duration-200 ease-in-out
                                        ${index > 0 ? '-ml-12' : ''}
                                        ${isLast ? 'mt-0' : 'mt-1'}
                                        hover:p-1
                                        ${isLast ? 'hover:mt-0' : 'hover:mt-0'}
                                        group
                                    `}
                                    style={{ zIndex: breadcrumbs.length - index }}
                                >
                                    {item.current ? (
                                        <span
                                            aria-current="page"
                                            className={`
                                                block overflow-hidden rounded-full
                                                transition-all duration-200 ease-in-out
                                                text-center no-underline
                                                ${isDark ? 'bg-slate-600 hover:bg-slate-500 text-slate-100' : 'bg-slate-500 hover:bg-slate-400 text-white'}
                                                h-12 w-12
                                                ${isLast ? 'hover:h-14 hover:w-14' : 'group-hover:w-36'}
                                                flex items-center justify-center
                                                ${!isLast ? 'pl-12 pr-4' : 'p-0'}
                                            `}
                                            aria-label={`Current page: ${item.name}`}
                                        >
                                            <div className="flex items-center justify-center w-full">
                                                <IconComponent 
                                                    className={`
                                                        w-5 h-5 shrink-0
                                                        ${isLast ? '' : 'mr-2'}
                                                    `} 
                                                    aria-hidden="true" 
                                                />
                                                <span 
                                                    className={`
                                                        text-sm font-medium whitespace-nowrap
                                                        ${isLast ? 'sr-only' : 'opacity-0 group-hover:opacity-100'}
                                                        transition-opacity duration-200
                                                    `}
                                                >
                                                    {item.name}
                                                </span>
                                            </div>
                                        </span>
                                    ) : (
                                        <Link
                                            href={item.href}
                                            className={`
                                                block overflow-hidden rounded-full
                                                transition-all duration-200 ease-in-out
                                                text-center no-underline
                                                ${isDark ? 'bg-slate-600 hover:bg-slate-500 text-slate-100' : 'bg-slate-500 hover:bg-slate-400 text-white'}
                                                ${isDark ? 'hover:text-slate-50' : 'hover:text-gray-50'}
                                                h-12 w-12
                                                ${isLast ? 'hover:h-14 hover:w-14' : 'group-hover:w-36'}
                                                flex items-center justify-center
                                                ${!isLast ? 'pl-12 pr-4' : 'p-0'}
                                                focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2
                                            `}
                                            aria-label={`Go to ${item.name}`}
                                        >
                                            <div className="flex items-center justify-center w-full">
                                                <IconComponent 
                                                    className={`
                                                        w-5 h-5 shrink-0
                                                        ${isLast ? '' : 'mr-2'}
                                                    `} 
                                                    aria-hidden="true" 
                                                />
                                                <span 
                                                    className={`
                                                        text-sm font-medium whitespace-nowrap
                                                        ${isLast ? 'sr-only' : 'opacity-0 group-hover:opacity-100'}
                                                        transition-opacity duration-200
                                                    `}
                                                >
                                                    {item.name}
                                                </span>
                                            </div>
                                        </Link>
                                    )}
                                </li>
                            )
                        })}
                    </ul>
                </div>
            </nav>
        </div>
    )
}
