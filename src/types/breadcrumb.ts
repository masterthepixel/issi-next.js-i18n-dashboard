// ==========================================
// ðŸ§­ Breadcrumb System Type Library
// ==========================================

import { Language } from './i18n';

/**
 * Core breadcrumb item structure
 */
export interface BreadcrumbItem {
  name: string;
  href?: string;
  current?: boolean;
  position?: number;
}

/**
 * Enhanced breadcrumb item with metadata
 */
export interface EnhancedBreadcrumbItem extends BreadcrumbItem {
  id: string;
  titleKey?: string;
  descriptionKey?: string;
  icon?: React.ComponentType<any>;
  metadata?: Record<string, any>;
}

/**
 * Breadcrumb generation configuration
 */
export interface BreadcrumbGeneratorConfig {
  lang: Language;
  pathname: string;
  baseUrl?: string;
  enableAutoTranslation?: boolean;
  enableSEO?: boolean;
  customTitles?: Record<string, string>;
}

/**
 * Auto-translation system configuration
 */
export interface BreadcrumbAutoTranslationConfig {
  enabled: boolean;
  fallbackLanguage: Language;
  customMappings?: Record<string, Record<Language, string>>;
  enableSmartCapitalization?: boolean;
}

/**
 * Breadcrumb SEO metadata
 */
export interface BreadcrumbSEOData {
  title: string;
  description: string;
  keywords: string[];
  canonical?: string;
  structuredData: BreadcrumbStructuredData;
}

/**
 * JSON-LD structured data for breadcrumbs
 */
export interface BreadcrumbStructuredData {
  '@context': 'https://schema.org';
  '@type': 'BreadcrumbList';
  itemListElement: BreadcrumbListItem[];
  inLanguage: Language;
}

/**
 * Individual breadcrumb list item for structured data
 */
export interface BreadcrumbListItem {
  '@type': 'ListItem';
  position: number;
  name: string;
  item?: string;
}

/**
 * Homepage detection configuration
 */
export interface HomepageDetectionConfig {
  strictMode?: boolean;
  customHomepaths?: string[];
  excludePatterns?: string[];
}

/**
 * Performance monitoring data for breadcrumbs
 */
export interface BreadcrumbPerformanceMetrics {
  generationTime: number;
  translationTime: number;
  seoGenerationTime: number;
  totalRenderTime: number;
  memoryUsage?: number;
}

/**
 * Development helper configuration
 */
export interface BreadcrumbDevConfig {
  enableConsoleLogging: boolean;
  enablePerformanceMonitoring: boolean;
  enableTranslationWarnings: boolean;
  enableSEOValidation: boolean;
  logLevel: 'debug' | 'info' | 'warn' | 'error';
}

/**
 * Translation validation result
 */
export interface BreadcrumbTranslationValidation {
  isValid: boolean;
  missingKeys: string[];
  autoGenerated: string[];
  suggestions: Record<string, string[]>;
  warnings: string[];
}

/**
 * Breadcrumb theme customization
 */
export interface BreadcrumbTheme {
  colors: {
    text: string;
    textHover: string;
    textActive: string;
    separator: string;
    background?: string;
  };
  typography: {
    fontSize: string;
    fontWeight: string;
    fontFamily?: string;
  };
  spacing: {
    padding: string;
    margin: string;
    gap: string;
  };
}

/**
 * Globe integration configuration for breadcrumbs
 */
export interface BreadcrumbGlobeConfig {
  enabled: boolean;
  position: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left';
  size: {
    mobile: { width: number; height: number };
    desktop: { width: number; height: number };
  };
  offset: {
    mobile: string;
    desktop: string;
  };
  zIndex: number;
  enableSSR: boolean;
}

/**
 * Universal breadcrumb component props
 */
export interface UniversalBreadcrumbProps {
  lang: Language;
  messages: Record<string, any>;
  enableDevMode?: boolean;
  enableAutoGeneration?: boolean;
  customConfig?: Partial<BreadcrumbGeneratorConfig>;
  globeConfig?: Partial<BreadcrumbGlobeConfig>;
  theme?: Partial<BreadcrumbTheme>;
  onPerformanceMetric?: (metrics: BreadcrumbPerformanceMetrics) => void;
  onTranslationMissing?: (key: string, suggestions: string[]) => void;
}

/**
 * Smart breadcrumb generator result
 */
export interface BreadcrumbGenerationResult {
  items: EnhancedBreadcrumbItem[];
  seoData: BreadcrumbSEOData;
  performance: BreadcrumbPerformanceMetrics;
  validation: BreadcrumbTranslationValidation;
  isHomepage: boolean;
  shouldRender: boolean;
}

/**
 * Breadcrumb cache entry
 */
export interface BreadcrumbCacheEntry {
  key: string;
  data: BreadcrumbGenerationResult;
  timestamp: number;
  ttl: number;
  language: Language;
}

/**
 * Breadcrumb error types
 */
export type BreadcrumbError = 
  | 'TRANSLATION_MISSING'
  | 'INVALID_PATHNAME'
  | 'SEO_GENERATION_FAILED'
  | 'GLOBE_RENDER_ERROR'
  | 'PERFORMANCE_THRESHOLD_EXCEEDED';

/**
 * Breadcrumb error details
 */
export interface BreadcrumbErrorInfo {
  type: BreadcrumbError;
  message: string;
  context?: Record<string, any>;
  suggestions?: string[];
  timestamp: number;
}

/**
 * Breadcrumb analytics data
 */
export interface BreadcrumbAnalytics {
  pageViews: number;
  clickThroughRate: number;
  averagePathLength: number;  popularPaths: string[];
  languageDistribution: Record<Language, number>;
}
