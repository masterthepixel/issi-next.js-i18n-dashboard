// ==========================================
// üåê Internationalization Type Library
// ==========================================

/**
 * Supported language codes
 */
export type Language = 'en' | 'fr' | 'es';

/**
 * Language direction
 */
export type TextDirection = 'ltr' | 'rtl';

/**
 * Complete language information
 */
export interface LanguageInfo {
  code: Language;
  name: string;
  nativeName: string;
  flag: string;
  direction: TextDirection;
  locale: string;
  region?: string;
  currency?: string;
  dateFormat?: string;
  timeFormat?: string;
}

/**
 * Translation message structure (nested object)
 */
export interface Messages {
  [key: string]: string | Messages;
}

/**
 * Flat translation structure for easier access
 */
export interface FlatMessages {
  [key: string]: string;
}

/**
 * Translation key structure for type safety
 */
export interface TranslationKeys {
  // Navigation
  'nav.home': string;
  'nav.about': string;
  'nav.services': string;
  'nav.products': string;
  'nav.contact': string;
  'nav.government': string;
  'nav.compliance': string;
  
  // Common UI
  'common.loading': string;
  'common.error': string;
  'common.success': string;
  'common.cancel': string;
  'common.save': string;
  'common.edit': string;
  'common.delete': string;
  'common.back': string;
  'common.next': string;
  'common.previous': string;
  'common.search': string;
  'common.filter': string;
  'common.sort': string;
  'common.view-all': string;
  'common.learn-more': string;
  'common.get-started': string;
  'common.contact-us': string;
  
  // Breadcrumbs
  'breadcrumb.home': string;
  'breadcrumb.services': string;
  'breadcrumb.products': string;
  'breadcrumb.about': string;
  'breadcrumb.contact': string;
  'breadcrumb.government': string;
  'breadcrumb.compliance': string;
  
  // SEO
  'seo.default.title': string;
  'seo.default.description': string;
  'seo.default.keywords': string;
  
  // Forms
  'form.validation.required': string;
  'form.validation.email': string;
  'form.validation.phone': string;
  'form.validation.url': string;
  'form.validation.min-length': string;
  'form.validation.max-length': string;
  
  // Dynamic keys (for auto-generated content)
  [K: `pages.${string}.title`]: string;
  [K: `pages.${string}.description`]: string;
  [K: `pages.${string}.seo.title`]: string;
  [K: `pages.${string}.seo.description`]: string;
  [K: `pages.${string}.seo.keywords`]: string;
}

/**
 * Translation context for complex translations
 */
export interface TranslationContext {
  count?: number;
  gender?: 'male' | 'female' | 'neutral';
  formality?: 'formal' | 'informal';
  region?: string;
  [key: string]: any;
}

/**
 * Formatted message parameters
 */
export interface MessageFormatParams {
  [key: string]: string | number | Date | boolean;
}

/**
 * Pluralization rules
 */
export interface PluralizationRules {
  zero?: string;
  one: string;
  two?: string;
  few?: string;
  many?: string;
  other: string;
}

/**
 * Date/time formatting options
 */
export interface DateTimeFormatOptions {
  locale: Language;
  timeZone?: string;
  dateStyle?: 'full' | 'long' | 'medium' | 'short';
  timeStyle?: 'full' | 'long' | 'medium' | 'short';
  calendar?: string;
  numberingSystem?: string;
}

/**
 * Number formatting options
 */
export interface NumberFormatOptions {
  locale: Language;
  style?: 'decimal' | 'currency' | 'percent';
  currency?: string;
  minimumFractionDigits?: number;
  maximumFractionDigits?: number;
  useGrouping?: boolean;
}

/**
 * Auto-translation configuration
 */
export interface AutoTranslationConfig {
  enabled: boolean;
  fallbackLanguage: Language;
  customMappings: Record<string, Record<Language, string>>;
  enableSmartCapitalization: boolean;
  enableContextualTranslation: boolean;
  cacheTranslations: boolean;
}

/**
 * Translation validation result
 */
export interface TranslationValidationResult {
  isValid: boolean;
  missingKeys: string[];
  invalidKeys: string[];
  suggestions: Record<string, string[]>;
  coverage: number; // percentage
  autoGenerated: string[];
}

/**
 * Language switching configuration
 */
export interface LanguageSwitchConfig {
  showFlags: boolean;
  showNativeNames: boolean;
  position: 'header' | 'footer' | 'sidebar' | 'floating';
  style: 'dropdown' | 'buttons' | 'pills';
  persistPreference: boolean;
  redirectOnChange: boolean;
}

/**
 * Translation loading state
 */
export interface TranslationLoadingState {
  language: Language;
  loading: boolean;
  loaded: boolean;
  error: string | null;
  lastUpdated: Date | null;
}

/**
 * RTL support configuration
 */
export interface RTLConfig {
  supportedLanguages: Language[];
  autoDetect: boolean;
  enableFlipAnimations: boolean;
  customRTLStyles: Record<string, string>;
}

/**
 * Translation analytics
 */
export interface TranslationAnalytics {
  popularLanguages: Record<Language, number>;
  translationUsage: Record<string, number>;
  missingTranslationReports: Array<{
    key: string;
    language: Language;
    timestamp: Date;
    page: string;
  }>;
  userLanguagePreferences: Record<Language, number>;
}

/**
 * Translation caching configuration
 */
export interface TranslationCacheConfig {
  enabled: boolean;
  strategy: 'memory' | 'localStorage' | 'sessionStorage' | 'indexedDB';
  ttl: number; // time to live in milliseconds
  maxSize: number; // maximum cache size
  compressionEnabled: boolean;
}

/**
 * Translation provider configuration
 */
export interface TranslationProviderConfig {
  defaultLanguage: Language;
  fallbackLanguage: Language;
  supportedLanguages: Language[];
  loadingStrategy: 'eager' | 'lazy' | 'preload';
  caching: TranslationCacheConfig;
  validation: {
    enabled: boolean;
    strict: boolean;
    reportMissing: boolean;
  };
  autoTranslation: AutoTranslationConfig;
}

/**
 * React component props for internationalization
 */
export interface WithInternationalization {
  lang: Language;
  messages: Messages;
  direction?: TextDirection;
}

/**
 * Page parameters with internationalization
 */
export interface I18nPageParams {
  lang: Language;
  [key: string]: string;
}

/**
 * Internationalized page metadata
 */
export interface I18nPageMetadata {
  title: Record<Language, string>;
  description: Record<Language, string>;
  keywords: Record<Language, string[]>;
  alternateUrls: Record<Language, string>;
  canonicalUrl?: string;
}

/**
 * Translation error types
 */
export type TranslationError = 
  | 'MISSING_KEY'
  | 'INVALID_FORMAT'
  | 'LOADING_FAILED'
  | 'UNSUPPORTED_LANGUAGE'
  | 'FALLBACK_MISSING'
  | 'VALIDATION_FAILED';

/**
 * Translation error details
 */
export interface TranslationErrorInfo {
  type: TranslationError;
  key: string;
  language: Language;
  message: string;
  context?: TranslationContext;
  timestamp: Date;
  suggestions?: string[];
}

/**
 * Internationalization hooks return types
 */
export interface UseTranslationReturn {
  t: (key: string, params?: MessageFormatParams) => string;
  formatMessage: (descriptor: { id: string; defaultMessage?: string }, values?: MessageFormatParams) => string;
  formatDate: (date: Date, options?: DateTimeFormatOptions) => string;
  formatNumber: (number: number, options?: NumberFormatOptions) => string;
  formatPlural: (count: number, rules: PluralizationRules) => string;
  language: Language;
  direction: TextDirection;
  isLoading: boolean;  error: TranslationErrorInfo | null;
}

// All types are already exported individually above
